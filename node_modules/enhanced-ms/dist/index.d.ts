declare const languages: {
	en: Language;
	mi: Language;
	de: Language;
};
declare const measurements: {
	ns: number;
	us: number;
	ms: number;
	s: number;
	m: number;
	h: number;
	d: number;
	w: number;
	mo: number;
	y: number;
	dec: number;
	c: number;
	kyr: number;
};
declare function numberify(input: string, _options?: NumberifyOptions, language?: LanguageOptions): any;
declare function stringify(input: number, options?: StringifyOptions, language?: LanguageOptions): string | null;
/**
 * Set the language for Enhanced MS to use.
 * @param value1 Language key
 * @returns The same function
 * ```js
 * ms(1000) === '1 second'
 * ms('mi') instanceof Function
 * ms(1000) === '1 hēkona'
 * ```
 */
export declare function ms(value1: LanguageKey): typeof ms;
/**
 * Set the global options.
 * @param value1 Options object
 * @returns This same function
 * @example
 * ```js
 * ms(1234567) === '20 minutes and 34 seconds'
 * ms({ roundUp: true }) instanceof Function
 * ms(1234567) === '21 minutes'
 * ```
 */
export declare function ms(value1: Options): typeof ms;
/**
 * Convert a number of millseconds into a human readable string.
 * @param value1 Number of milliseconds
 * @param value2 Language key **OR** options object
 * @param value3 Options object
 * @example
 * ```js
 * ms(123456) === '2 minutes and 3 seconds'
 * ms(123456, { shortFormat: true }) === '2m 3s'
 * ms(123456, { roundUp: true }) === '2 minutes'
 * ms(123456, { includeMs: true }) === '2 minutes 3 seconds and 456 milliseconds'
 * ms(123.456, { includeSubMs: true }) === '123 milliseconds and 456 microseconds'
 * ms(123456, 'mi') === '2 meneti me te 3 hēkona'
 * ```
 */
export declare function ms(value1: number, value2?: LanguageKey | Options, value3?: Options): ReturnType<typeof stringify>;
/**
 * Convert a human readable time-frame string into milliseconds.
 * @param value1 String time-frame
 * @param value2 Language key **OR** options object
 * @param value3 Options object
 * @example
 * ```js
 * ms('1 day') === 86400000
 * ms('3m 34s') === 214000
 * ms(ms('1d - 4h')) === '20 hours'
 * ms(ms('7d / 7')) === '1 day'
 * ms('1 meneti', 'mi') === 60000
 * ```
 */
export declare function ms(value1: string, value2?: LanguageKey | Options, value3?: Options): ReturnType<typeof numberify>;
export declare type LanguageKey = keyof typeof languages;
export declare type Options = NumberifyOptions & StringifyOptions;
export interface Language {
	/** The version of 'and' in this language */
	and: string;
	/** The decimal separator this language uses */
	decimal: "," | ".";
	/** Measurement units */
	units: Unit[];
}
export interface LanguageOptions {
	/** The version of 'and' in the language */
	andValue: string;
	/** The decimal separator the language uses */
	decimalSeparator: string;
	/** The key for the selected language */
	key: LanguageKey;
	/** The regex to match lengths of time */
	regex: RegExp;
	/** Whether the language has full short support */
	supportsAbbreviations: boolean;
	/** The thousands separator the language uses */
	thousandsSeparator: string;
	/** The units and their names in the language, as a map */
	units: Record<string, Unit & {
		ms: number;
	}>;
}
export interface NumberifyOptions {
}
export interface StringifyOptions {
	/** Include milliseconds in the output */
	includeMs?: boolean;
	/** Include sub milliseconds in the output */
	includeSubMs?: boolean;
	/** Round the result to the highest unit */
	roundUp?: boolean;
	/** Use the short names of measurements */
	shortFormat?: boolean;
}
export interface Unit {
	/** Short form of the measurement */
	abbreviation?: string | ((count: number) => string);
	/** Key to identify this unit */
	key: keyof typeof measurements;
	/** Strings used for the string regex */
	matches: string[];
	/** Long form of the measurement */
	name: string | ((count: number) => string);
}
export {
	ms as default,
};